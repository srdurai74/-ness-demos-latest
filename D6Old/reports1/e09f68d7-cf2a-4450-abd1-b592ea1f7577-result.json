{"name": "test_environment_issue", "status": "failed", "statusDetails": {"message": "Failed: TimeoutException occurred while loading the page", "trace": "self = <test_d1.TestAllureReportExample object at 0x0000020F1A908FA0>\n\n    def test_environment_issue(self):\n        # This test simulates an environment issue like a TimeoutException\n        try:\n            self.driver.set_page_load_timeout(0.01)  # Unrealistically short timeout\n>           self.driver.get(\"https://www.example.com\")\n\ndummy\\test_d1.py:42: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nC:\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:446: in get\n    self.execute(Command.GET, {'url': url})\nC:\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:434: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000020F1A909B10>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"timeout\",\"message\":\"timeout: Timed out receiving message from renderer: 0...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77887C6E+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77887C3E+238]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get('methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"{}.{}\".format(frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: timeout: Timed out receiving message from renderer: 0.005\nE         (Session info: chrome=129.0.6668.90)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00EB5523+24195]\nE       \t(No symbol) [0x00E4AA04]\nE       \t(No symbol) [0x00D42093]\nE       \t(No symbol) [0x00D2E285]\nE       \t(No symbol) [0x00D2DFB8]\nE       \t(No symbol) [0x00D2C408]\nE       \t(No symbol) [0x00D2CABD]\nE       \t(No symbol) [0x00D38C8A]\nE       \t(No symbol) [0x00D4D215]\nE       \t(No symbol) [0x00D51816]\nE       \t(No symbol) [0x00D2D0EC]\nE       \t(No symbol) [0x00D4D08E]\nE       \t(No symbol) [0x00DC55B1]\nE       \t(No symbol) [0x00DAA8D6]\nE       \t(No symbol) [0x00D7BA27]\nE       \t(No symbol) [0x00D7C43D]\nE       \tGetHandleVerifier [0x0117CE13+2938739]\nE       \tGetHandleVerifier [0x011CEC69+3274185]\nE       \tGetHandleVerifier [0x00F409C2+594722]\nE       \tGetHandleVerifier [0x00F47EDC+624700]\nE       \t(No symbol) [0x00E537CD]\nE       \t(No symbol) [0x00E50528]\nE       \t(No symbol) [0x00E506C5]\nE       \t(No symbol) [0x00E42CA6]\nE       \tBaseThreadInitThunk [0x75EFFCC9+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x77887C6E+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x77887C3E+238]\n\nC:\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:243: TimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_d1.TestAllureReportExample object at 0x0000020F1A908FA0>\n\n    def test_environment_issue(self):\n        # This test simulates an environment issue like a TimeoutException\n        try:\n            self.driver.set_page_load_timeout(0.01)  # Unrealistically short timeout\n            self.driver.get(\"https://www.example.com\")\n        except TimeoutException:\n>           pytest.fail(\"TimeoutException occurred while loading the page\")\nE           Failed: TimeoutException occurred while loading the page\n\ndummy\\test_d1.py:44: Failed"}, "start": 1728961932022, "stop": 1728961932039, "uuid": "7f43f9e5-31cc-4537-b873-482227ad7c4b", "historyId": "21a180915300f04673b15186d941d440", "testCaseId": "21a180915300f04673b15186d941d440", "fullName": "dummy.test_d1.TestAllureReportExample#test_environment_issue", "labels": [{"name": "tag", "value": "@pytest.mark.usefixtures('setup')"}, {"name": "parentSuite", "value": "dummy"}, {"name": "suite", "value": "test_d1"}, {"name": "subSuite", "value": "TestAllureReportExample"}, {"name": "host", "value": "BLR-REG-338464"}, {"name": "thread", "value": "21560-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "dummy.test_d1"}]}